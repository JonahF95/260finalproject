{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2022-12-19T12:38:32-05:00"
    },
    {
      "path": "getdata.html",
      "title": "Get Methylation Data",
      "description": "A new article created using the Distill format.\n",
      "author": [
        {
          "name": "Jonah Fisher",
          "url": "https://github.com/JonahF95"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\r\nGet data\r\nRead in html page for sample list and pull replicate pairs\r\n\r\n\r\nurl <- \"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE61496\"\r\nl <- read_html(url)\r\nl <- l %>% html_text %>% str_split(\"\\n\") %>% unlist\r\nidx <- str_detect(l, \"_[A|B]\") %>% which\r\n\r\ndat <- data.table(\r\n  id = l[idx - 1],\r\n  num = l[idx]\r\n)\r\n\r\ndat[, c(\"num\", \"orig\") := tstrsplit(num, \"_\")]\r\nsetkey(dat, num)\r\n\r\n\r\nGet urls for raw files\r\nThere’s a similar FTP address for the files that we can plug into a looping function\r\nwhich takes the GSM identifier of the file and downloads the corresponding idat\r\n\r\n\r\nif(!dir.exists(\"idats\")){\r\n  dir.create(\"idats\")\r\n}\r\n\r\n#Where this series is located\r\nrepourl <- \"https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM1506nnn/\"\r\n\r\nif(length(list.files(\"idats\")) < dat[, 2*length(id)]){ #A tiny bit hackish control flow\r\n  for(i in dat[, id]){\r\n  #Need to grab more info on name of sample to download\r\n    ftplines <- paste0(repourl, i, \"/suppl/\") %>% readLines() \r\n  \r\n  #Get red and green idat file locations\r\n    idatnames <- ftplines[str_detect(ftplines, \"\\\\.idat\\\\.gz\")] %>% tstrsplit('\\\\\"', keep = 2) %>% unlist\r\n      paste0(repourl, i, \"/suppl/\", idatnames[[1]]) %>% \r\n      download.file(destfile = paste0(\"idats/\",idatnames[[1]]))\r\n    \r\n      paste0(repourl, i, \"/suppl/\", idatnames[[2]]) %>% \r\n      download.file(destfile = paste0(\"idats/\",idatnames[[2]]))\r\n  }\r\n}\r\n\r\n\r\nPull information on biological sex for qc check\r\nAll samples for this study have have bio sex listed on the website after a uniform pattern\r\nof “sex, 1=m, 2=f: [number]” which we can use to match to web scraped results.\r\n\r\n\r\ns <- readLines(\"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSM1506327\")\r\nbiosex <- map(dat[, id], function(acc){\r\n  readLines(paste0(\"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=\", acc)) %>%\r\n  str_extract(\"sex, 1=m, 2=f: \\\\d\") %>%\r\n  .[!is.na(.)] %>% \r\n  str_split(\"\") %>% \r\n  unlist() %>% \r\n  tail(n=1)\r\n})\r\n\r\ndat[, sex := c(\"m\", \"f\")[unlist(biosex) %>% as.numeric]]\r\n\r\nfwrite(dat, \"samplesheet.csv\")\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-12-19T12:38:32-05:00"
    },
    {
      "path": "index.html",
      "title": "Capstone Project: BST 260",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2022-12-19T12:38:33-05:00"
    },
    {
      "path": "qc.html",
      "title": "Quality Control",
      "description": "A new article created using the Distill format.\n",
      "author": [
        {
          "name": "Jonah Fisher",
          "url": "https://github.com/JonahF95"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\r\n\r\nContents\r\nSex check\r\nMethylation intensity\r\nAverage detection P failure\r\nCheck genotyping agreement\r\nQC with beta methylation matrix\r\nCell proportions\r\nPrincipal components\r\nPCS by slide\r\n\r\n\r\n\r\n\r\ndat <- fread(\"samplesheet.csv\")\r\n\r\nif(!dir.exists(\"pp\")){\r\n  dir.create(\"pp\")\r\n}\r\n\r\n\r\n\r\n\r\nif(!file.exists(\"pp/meth.rds\")){\r\n  idats <- list.files(\"idats/\", full.names = T, pattern = \"\\\\.idat.gz$\") %>%\r\n    str_remove(\"_(Grn|Red)\\\\.idat\\\\.gz\") %>%\r\n    unique \r\n\r\n  indmatch <- match(dat[, id], idats %>% str_extract(\"GSM[\\\\d]*\"))\r\n  idats <- idats[indmatch]\r\n\r\n  meth <- read_idats(idats) %>% detectionP\r\n  stopifnot(dat[, id] == str_extract(meth$meta$sample_id, \"GSM[\\\\d]*\"))\r\n  saveRDS(meth, \"pp/meth.rds\")\r\n}\r\n\r\n\r\n\r\n\r\n#Get SNP probes for genotyping\r\nmeth <- readRDS(\"pp/meth.rds\")\r\nmani <- ewastools:::manifest_450K\r\nsnps <- mani[probe_type == \"rs\", probe_id]\r\ngeno <- call_genotypes(meth %>% mask(0.01) %>% dont_normalize %>% .[snps,])\r\n\r\ndat[, c(\"x\", \"y\") := check_sex(meth)]\r\n\r\ndat[, missing := colMeans(meth$detP, na.rm = T)]\r\n\r\ndat[, u := colMedians(meth$U, na.rm = T) %>% log2]\r\ndat[, m := colMedians(meth$M, na.rm = T) %>% log2]\r\n\r\n\r\nSex check\r\nCheck that reported biological sex is concordant with methylation chromosome\r\nintensity. Below plot shows that this is the case and that there are no issues\r\nbetween reported and observed\r\n\r\n\r\nggplot(dat, aes(x = x, y = y, color = sex)) +\r\n  geom_point(size = 1.5) +\r\n  labs(x = \"X chromosome intensity\", y= \"Y chromosome intensity\", color = \"Reported sex\") +\r\n  theme(legend.position = \"bottom\") +\r\n  scale_color_aaas()\r\n\r\n\r\n\r\nMethylation intensity\r\n\r\n\r\nggplot(dat, aes(x = m, y = u)) +\r\n  geom_point() + \r\n  labs(x = \"Methylated intensity\", y = \"Unmethylated intensity\",\r\n       title = \"Median intensities on log2 scale\")\r\n\r\n\r\n\r\nAverage detection P failure\r\n\r\n\r\nggplot(dat, aes(x = missing)) +\r\n  geom_histogram(color = \"black\", fill = \"grey\", bins = 4) +\r\n  labs(x = \"Average probe failure for sample\")\r\n\r\n\r\n\r\nCheck genotyping agreement\r\nThe following function uses the expression from SNP probes to infer genotypes\r\nand check for genetic relatedness. We see that 3 of our technical replicate\r\npairs appear to be duplicates of the other 3 replicate pairs. They are in fact\r\nfrom monozygotic twins and not from the same individual which is why\r\nit looks like we erroneously have duplicate samples listed as from different\r\npeople.\r\n\r\n\r\ncheck_snp_agreement(geno, dat[, num], dat[, id])\r\n\r\n$`1`\r\n   donor1    sample1 donor2    sample2 agreement\r\n1:   2032 GSM1506284   2033 GSM1506278 0.9999912\r\n2:   2032 GSM1506284   2033 GSM1506581 0.9999738\r\n3:   2032 GSM1506587   2033 GSM1506278 0.9999278\r\n4:   2032 GSM1506587   2033 GSM1506581 0.9999975\r\n\r\n$`2`\r\n   donor1    sample1 donor2    sample2 agreement\r\n1:   2041 GSM1506342   2042 GSM1506336 0.9999925\r\n2:   2041 GSM1506342   2042 GSM1506580 0.9992212\r\n3:   2041 GSM1506586   2042 GSM1506336 0.9995901\r\n4:   2041 GSM1506586   2042 GSM1506580 0.9999960\r\n\r\n$`3`\r\n   donor1    sample1 donor2    sample2 agreement\r\n1:   2085 GSM1506333   2086 GSM1506327 0.9999908\r\n2:   2085 GSM1506333   2086 GSM1506432 0.9999783\r\n3:   2085 GSM1506438   2086 GSM1506327 0.9999454\r\n4:   2085 GSM1506438   2086 GSM1506432 0.9999915\r\n\r\nQC with beta methylation matrix\r\n\r\n\r\nbeta <- meth %>% dont_normalize()\r\n\r\n\r\nCell proportions\r\n\r\n\r\ncells <- estimateLC(beta, ref = \"Salas\")\r\ncellpc1 <- prcomp(cells)$x[, 1]\r\ndat[, cellpc := cellpc1]\r\n\r\n\r\nPrincipal components\r\n\r\n\r\nwhichna <- which(is.na(beta), arr.ind = T)\r\nbeta[whichna] <- rowMeans(beta, na.rm = T)[whichna[, 1]]\r\npcs <- beta %>% t %>% prcomp\r\ndat <- data.table(dat, pcs$x[, 1:5])\r\n\r\n\r\nSurprisingly no real relationship in the cell pell principal component and\r\ngeneral expression principal component\r\n\r\n\r\nggplot(dat, aes(PC1, PC2, \r\n                color = cut(cellpc1, 3) %>% as.factor %>% as.integer %>% as.factor)) +\r\n  geom_point() +\r\n  labs(color = \"Tertile of cell PC\") +\r\n  theme(legend.position = \"bottom\") +\r\n  scale_color_aaas()\r\n\r\n\r\n\r\nPCS by slide\r\nThe technical replicate pairs are plated next to each other which means\r\nthey aren’t subject to batch effects as much. This can be good or bad depending\r\non how you look at it. It will make the concordance between these pairs\r\nto be artificially higher than concordance between different plated pairs.\r\n\r\n\r\ndat[, slide := tstrsplit(colnames(beta), \"_\", keep = 2)]\r\n\r\nggplot(dat, aes(x = PC1, y = PC2, color = as.factor(slide))) +\r\n  geom_point() +\r\n  labs(color = \"Slide\") +\r\n  scale_color_aaas()\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2022-12-19T12:38:32-05:00"
    }
  ],
  "collections": []
}
